// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package commodity

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CommodityServiceClient is the client API for CommodityService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CommodityServiceClient interface {
	CommodityAdd(ctx context.Context, in *AddRequest, opts ...grpc.CallOption) (*AddResponse, error)
	CommodityShow(ctx context.Context, in *ShowRequest, opts ...grpc.CallOption) (*ShowResponse, error)
}

type commodityServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCommodityServiceClient(cc grpc.ClientConnInterface) CommodityServiceClient {
	return &commodityServiceClient{cc}
}

func (c *commodityServiceClient) CommodityAdd(ctx context.Context, in *AddRequest, opts ...grpc.CallOption) (*AddResponse, error) {
	out := new(AddResponse)
	err := c.cc.Invoke(ctx, "/api.protobuf.commodity.CommodityService/CommodityAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commodityServiceClient) CommodityShow(ctx context.Context, in *ShowRequest, opts ...grpc.CallOption) (*ShowResponse, error) {
	out := new(ShowResponse)
	err := c.cc.Invoke(ctx, "/api.protobuf.commodity.CommodityService/CommodityShow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CommodityServiceServer is the server API for CommodityService service.
// All implementations must embed UnimplementedCommodityServiceServer
// for forward compatibility
type CommodityServiceServer interface {
	CommodityAdd(context.Context, *AddRequest) (*AddResponse, error)
	CommodityShow(context.Context, *ShowRequest) (*ShowResponse, error)
	mustEmbedUnimplementedCommodityServiceServer()
}

// UnimplementedCommodityServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCommodityServiceServer struct {
}

func (UnimplementedCommodityServiceServer) CommodityAdd(context.Context, *AddRequest) (*AddResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommodityAdd not implemented")
}
func (UnimplementedCommodityServiceServer) CommodityShow(context.Context, *ShowRequest) (*ShowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommodityShow not implemented")
}
func (UnimplementedCommodityServiceServer) mustEmbedUnimplementedCommodityServiceServer() {}

// UnsafeCommodityServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CommodityServiceServer will
// result in compilation errors.
type UnsafeCommodityServiceServer interface {
	mustEmbedUnimplementedCommodityServiceServer()
}

func RegisterCommodityServiceServer(s grpc.ServiceRegistrar, srv CommodityServiceServer) {
	s.RegisterService(&CommodityService_ServiceDesc, srv)
}

func _CommodityService_CommodityAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommodityServiceServer).CommodityAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.protobuf.commodity.CommodityService/CommodityAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommodityServiceServer).CommodityAdd(ctx, req.(*AddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommodityService_CommodityShow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommodityServiceServer).CommodityShow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.protobuf.commodity.CommodityService/CommodityShow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommodityServiceServer).CommodityShow(ctx, req.(*ShowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CommodityService_ServiceDesc is the grpc.ServiceDesc for CommodityService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CommodityService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.protobuf.commodity.CommodityService",
	HandlerType: (*CommodityServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CommodityAdd",
			Handler:    _CommodityService_CommodityAdd_Handler,
		},
		{
			MethodName: "CommodityShow",
			Handler:    _CommodityService_CommodityShow_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/protobuf/commodity/commodity.proto",
}
