// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package stock

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SrockServiceClient is the client API for SrockService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SrockServiceClient interface {
	// 商品库存变动
	StockChange(ctx context.Context, in *ChangeRequest, opts ...grpc.CallOption) (*ChangeResponse, error)
	StockLook(ctx context.Context, in *LookRequest, opts ...grpc.CallOption) (*LookResponse, error)
}

type srockServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSrockServiceClient(cc grpc.ClientConnInterface) SrockServiceClient {
	return &srockServiceClient{cc}
}

func (c *srockServiceClient) StockChange(ctx context.Context, in *ChangeRequest, opts ...grpc.CallOption) (*ChangeResponse, error) {
	out := new(ChangeResponse)
	err := c.cc.Invoke(ctx, "/api.protobuf.stock.SrockService/StockChange", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *srockServiceClient) StockLook(ctx context.Context, in *LookRequest, opts ...grpc.CallOption) (*LookResponse, error) {
	out := new(LookResponse)
	err := c.cc.Invoke(ctx, "/api.protobuf.stock.SrockService/StockLook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SrockServiceServer is the server API for SrockService service.
// All implementations must embed UnimplementedSrockServiceServer
// for forward compatibility
type SrockServiceServer interface {
	// 商品库存变动
	StockChange(context.Context, *ChangeRequest) (*ChangeResponse, error)
	StockLook(context.Context, *LookRequest) (*LookResponse, error)
	mustEmbedUnimplementedSrockServiceServer()
}

// UnimplementedSrockServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSrockServiceServer struct {
}

func (UnimplementedSrockServiceServer) StockChange(context.Context, *ChangeRequest) (*ChangeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StockChange not implemented")
}
func (UnimplementedSrockServiceServer) StockLook(context.Context, *LookRequest) (*LookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StockLook not implemented")
}
func (UnimplementedSrockServiceServer) mustEmbedUnimplementedSrockServiceServer() {}

// UnsafeSrockServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SrockServiceServer will
// result in compilation errors.
type UnsafeSrockServiceServer interface {
	mustEmbedUnimplementedSrockServiceServer()
}

func RegisterSrockServiceServer(s grpc.ServiceRegistrar, srv SrockServiceServer) {
	s.RegisterService(&SrockService_ServiceDesc, srv)
}

func _SrockService_StockChange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SrockServiceServer).StockChange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.protobuf.stock.SrockService/StockChange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SrockServiceServer).StockChange(ctx, req.(*ChangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SrockService_StockLook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SrockServiceServer).StockLook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.protobuf.stock.SrockService/StockLook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SrockServiceServer).StockLook(ctx, req.(*LookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SrockService_ServiceDesc is the grpc.ServiceDesc for SrockService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SrockService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.protobuf.stock.SrockService",
	HandlerType: (*SrockServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StockChange",
			Handler:    _SrockService_StockChange_Handler,
		},
		{
			MethodName: "StockLook",
			Handler:    _SrockService_StockLook_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/protobuf/stock/stock.proto",
}
